
08048479 <handle_checks>:
 8048479:	55                   	push   %ebp
 804847a:	89 e5                	mov    %esp,%ebp
 804847c:	57                   	push   %edi
 804847d:	56                   	push   %esi
 804847e:	83 ec 40             	sub    $0x40,%esp //for stack variables
 8048481:	8d 7d cb             	lea    -0x35(%ebp),%edi
 8048484:	be f8 88 04 08       	mov    $0x80488f8,%esi
 8048489:	fc                   	cld    
 804848a:	b9 29 00 00 00       	mov    $0x29,%ecx
 804848f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
 8048491:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
 8048498:	eb 21                	jmp    80484bb <handle_checks+0x42>
 804849a:	8b 15 14 9b 04 08    	mov    0x8049b14,%edx
 80484a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80484a3:	0f b6 44 05 cb       	movzbl -0x35(%ebp,%eax,1),%eax
 80484a8:	0f be c0             	movsbl %al,%eax
 80484ab:	89 54 24 04          	mov    %edx,0x4(%esp)
 80484af:	89 04 24             	mov    %eax,(%esp)
 80484b2:	e8 c5 fe ff ff       	call   804837c <fputc@plt>
 80484b7:	83 45 f4 02          	addl   $0x2,-0xc(%ebp)
 80484bb:	83 7d f4 27          	cmpl   $0x27,-0xc(%ebp)
 80484bf:	7e d9                	jle    804849a <handle_checks+0x21>
 80484c1:	83 c4 40             	add    $0x40,%esp
 80484c4:	5e                   	pop    %esi
 80484c5:	5f                   	pop    %edi
 80484c6:	5d                   	pop    %ebp
 80484c7:	c3                   	ret    

080484c8 <check_serial>:
 80484c8:	55                   	push   %ebp
 80484c9:	89 e5                	mov    %esp,%ebp
 80484cb:	53                   	push   %ebx
 80484cc:	83 ec 30             	sub    $0x30,%esp//for variables o
 80484cf:	8b 45 0c             	mov    0xc(%ebp),%eax//no change?! =0x66
 80484d2:	83 c0 09             	add    $0x9,%eax//*eax now:..bb3=0x00
 80484d5:	0f b6 00             	movzbl (%eax),%eax//*eax:0x0=
 80484d8:	0f b6 d0             	movzbl %al,%edx//*edx:0x0
 80484db:	a1 08 9b 04 08       	mov    0x8049b08,%eax//*eax:hdl_ch=0x55
 80484e0:	31 d0                	xor    %edx,%eax//no change
 80484e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
 80484e5:	8b 45 f4             	mov    -0xc(%ebp),%eax//no change
 80484e8:	a3 08 9b 04 08       	mov    %eax,0x8049b08//no change??
 80484ed:	8b 45 08             	mov    0x8(%ebp),%eax//move user* into eax
 80484f0:	0f b6 00             	movzbl (%eax),%eax//first letter in Eax
 80484f3:	88 45 e9             	mov    %al,-0x17(%ebp)//1b =0x10000066
 80484f6:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)//1l =0x00000001
														//init loop
 80484fd:	eb 5b                	jmp    804855a <check_serial+0x92>


 80484ff:	8b 5d f8             	mov    -0x8(%ebp),%ebx//index
 8048502:	8b 45 f8             	mov    -0x8(%ebp),%eax//index
 8048505:	03 45 08             	add    0x8(%ebp),%eax//loop over serial*
 8048508:	0f b6 00             	movzbl (%eax),%eax
 804850b:	0f b6 d0             	movzbl %al,%edx //edx=char(i)
 804850e:	8b 45 f8             	mov    -0x8(%ebp),%eax//i
 8048511:	48                   	dec    %eax//i--
 8048512:	0f b6 44 05 e9       	movzbl -0x17(%ebp,%eax,1),%eax//get previous char
prev. 8048517:	0f b6 c0             	movzbl %al,%eax//eax=previous char
c1. 804851a:	8d 04 02             	lea    (%edx,%eax,1),%eax//previous, current char; add them together; ignore the 1
r2. 804851d:	89 c1                	mov    %eax,%ecx//ecx=result; store r0
 804851f:	c7 45 cc 49 b4 c2 e6 	movl   $0xe6c2b449,-0x34(%ebp)
 8048526:	8b 45 cc             	mov    -0x34(%ebp),%eax//load above
c2. 8048529:	f7 e1                	mul    %ecx//($0xe6c2b449*ecx)=edx.eax
c3. 804852b:	89 d0                	mov    %edx,%eax//result>>32
c4. 804852d:	c1 e8 06             	shr    $0x6,%eax//result>>6
r1. 8048530:	89 45 d0             	mov    %eax,-0x30(%ebp)//store r1
 8048533:	8b 45 d0             	mov    -0x30(%ebp),%eax//no change
c5. 8048536:	c1 e0 03             	shl    $0x3,%eax//<<3
c6. 8048539:	03 45 d0             	add    -0x30(%ebp),%eax//+=r1
c7. 804853c:	c1 e0 03             	shl    $0x3,%eax//<<3
c8. 804853f:	2b 45 d0             	sub    -0x30(%ebp),%eax//r-=r1
 8048542:	89 ca                	mov    %ecx,%edx
c9. 8048544:	29 c2                	sub    %eax,%edx//r0=r0-r
 8048546:	89 55 d0             	mov    %edx,-0x30(%ebp)
 8048549:	8b 55 d0             	mov    -0x30(%ebp),%edx//no changes
 804854c:	0f b6 82 c0 9a 04 08 	movzbl 0x8049ac0(%edx),%eax//move value at edx+0x8049ac0; move one of the alphabet letters to eax
 8048553:	88 44 1d e9          	mov    %al,-0x17(%ebp,%ebx,1)
 8048557:	ff 45 f8             	incl   -0x8(%ebp)//increment loop
 804855a:	83 7d f8 08          	cmpl   $0x8,-0x8(%ebp)//loop 8 times
 804855e:	7e 9f                	jle    80484ff <check_serial+0x37>

//add last part of serial
 8048560:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0. 8048564:	0f b6 c0             	movzbl %al,%eax//prev_char
c1. 8048567:	f7 d0                	not    %eax//invert
s. 8048569:	89 c1                	mov    %eax,%ecx//store r0
 804856b:	c7 45 cc 49 b4 c2 e6 	movl   $0xe6c2b449,-0x34(%ebp)
 8048572:	8b 45 cc             	mov    -0x34(%ebp),%eax
c2. 8048575:	f7 e1                	mul    %ecx
c3. 8048577:	89 d0                	mov    %edx,%eax//(!prev_char*secret)>>32
c4. 8048579:	c1 e8 06             	shr    $0x6,%eax//
s. 804857c:	89 45 d4             	mov    %eax,-0x2c(%ebp)//store r1
 804857f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c5. 8048582:	c1 e0 03             	shl    $0x3,%eax
c6. 8048585:	03 45 d4             	add    -0x2c(%ebp),%eax//r+=r1
c7. 8048588:	c1 e0 03             	shl    $0x3,%eax
c8. 804858b:	2b 45 d4             	sub    -0x2c(%ebp),%eax//r-=r1
s. 804858e:	89 ca                	mov    %ecx,%edx
c9. 8048590:	29 c2                	sub    %eax,%edx//r-=r0
s. 8048592:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 8048595:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c10. 8048598:	0f b6 82 c0 9a 04 08 	movzbl 0x8049ac0(%edx),%eax//load table char

 804859f:	88 45 f2             	mov    %al,-0xe(%ebp)//instruction which changes everything
 80485a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)//clear ebp again
 80485a9:	eb 21                	jmp    80485cc <check_serial+0x104>//jump to compare

//compare gen_serial with given serial
 80485ab:	8b 45 f8             	mov    -0x8(%ebp),%eax//counter: i:0,...
 80485ae:	0f b6 54 05 e9       	movzbl -0x17(%ebp,%eax,1),%edx//read gen_serial char
 80485b3:	8b 45 f8             	mov    -0x8(%ebp),%eax
 80485b6:	03 45 0c             	add    0xc(%ebp),%eax//read given_serial; use counter i
 80485b9:	0f b6 00             	movzbl (%eax),%eax
 80485bc:	38 c2                	cmp    %al,%dl //compare each char
 80485be:	74 09                	je     80485c9 <check_serial+0x101>
 80485c0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)//if comparison wrong mark it as so
 80485c7:	eb 22                	jmp    80485eb <check_serial+0x123>//go to the end
 80485c9:	ff 45 f8             	incl   -0x8(%ebp)
 80485cc:	83 7d f8 09          	cmpl   $0x9,-0x8(%ebp)
 80485d0:	7e d9                	jle    80485ab <check_serial+0xe3>//loop over comparison


 80485d2:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
 80485d6:	0f b6 c0             	movzbl %al,%eax
 80485d9:	31 45 f4             	xor    %eax,-0xc(%ebp)
 80485dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
 80485df:	a3 08 9b 04 08       	mov    %eax,0x8049b08
 80485e4:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)//comparison result is true

 80485eb:	8b 45 d8             	mov    -0x28(%ebp),%eax//jmp-destination; move comparison result to eax
 80485ee:	83 c4 30             	add    $0x30,%esp
 80485f1:	5b                   	pop    %ebx
 80485f2:	5d                   	pop    %ebp
 80485f3:	c3                   	ret    

0804864c <main>:
 804864c:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 8048650:	83 e4 f0             	and    $0xfffffff0,%esp
 8048653:	ff 71 fc             	pushl  -0x4(%ecx)
 8048656:	55                   	push   %ebp
 8048657:	89 e5                	mov    %esp,%ebp
 8048659:	51                   	push   %ecx
 804865a:	83 ec 54             	sub    $0x54,%esp
 804865d:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
 8048660:	a1 69 89 04 08       	mov    0x8048969,%eax
 8048665:	89 45 e8             	mov    %eax,-0x18(%ebp)
 8048668:	a1 6d 89 04 08       	mov    0x804896d,%eax
 804866d:	89 45 ec             	mov    %eax,-0x14(%ebp)
 8048670:	a1 71 89 04 08       	mov    0x8048971,%eax
 8048675:	89 45 f0             	mov    %eax,-0x10(%ebp)
 8048678:	a1 75 89 04 08       	mov    0x8048975,%eax
 804867d:	89 45 f4             	mov    %eax,-0xc(%ebp)
 8048680:	a1 79 89 04 08       	mov    0x8048979,%eax
 8048685:	89 45 f8             	mov    %eax,-0x8(%ebp)
 8048688:	8b 45 c4             	mov    -0x3c(%ebp),%eax
 804868b:	83 38 03             	cmpl   $0x3,(%eax)
 804868e:	74 2e                	je     80486be <main+0x72>
 8048690:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 8048693:	8b 42 04             	mov    0x4(%edx),%eax
 8048696:	8b 00                	mov    (%eax),%eax
 8048698:	8b 15 18 9b 04 08    	mov    0x8049b18,%edx
 804869e:	89 44 24 08          	mov    %eax,0x8(%esp)
 80486a2:	c7 44 24 04 21 89 04 	movl   $0x8048921,0x4(%esp)
 80486a9:	08 
 80486aa:	89 14 24             	mov    %edx,(%esp)
 80486ad:	e8 aa fc ff ff       	call   804835c <fprintf@plt>
 80486b2:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
 80486b9:	e9 1f 01 00 00       	jmp    80487dd <main+0x191>
 80486be:	8d 45 dd             	lea    -0x23(%ebp),%eax
 80486c1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 80486c7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 80486ce:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
 80486d4:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
 80486d8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 80486db:	8b 42 04             	mov    0x4(%edx),%eax
 80486de:	83 c0 04             	add    $0x4,%eax
 80486e1:	8b 00                	mov    (%eax),%eax
 80486e3:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 80486ea:	00 
 80486eb:	89 44 24 04          	mov    %eax,0x4(%esp)
 80486ef:	8d 45 dd             	lea    -0x23(%ebp),%eax
 80486f2:	89 04 24             	mov    %eax,(%esp)
 80486f5:	e8 a2 fc ff ff       	call   804839c <strncpy@plt>
 80486fa:	8d 45 d2             	lea    -0x2e(%ebp),%eax
 80486fd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
 8048703:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
 804870a:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
 8048710:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
 8048714:	8b 55 c4             	mov    -0x3c(%ebp),%edx
 8048717:	8b 42 04             	mov    0x4(%edx),%eax
 804871a:	83 c0 08             	add    $0x8,%eax
 804871d:	8b 00                	mov    (%eax),%eax
 804871f:	c7 44 24 08 0a 00 00 	movl   $0xa,0x8(%esp)
 8048726:	00 
 8048727:	89 44 24 04          	mov    %eax,0x4(%esp)
 804872b:	8d 45 d2             	lea    -0x2e(%ebp),%eax
 804872e:	89 04 24             	mov    %eax,(%esp)
 8048731:	e8 66 fc ff ff       	call   804839c <strncpy@plt>
 8048736:	8d 45 dd             	lea    -0x23(%ebp),%eax
 8048739:	0f b6 00             	movzbl (%eax),%eax
 804873c:	84 c0                	test   %al,%al
 804873e:	75 2e                	jne    804876e <main+0x122>
 8048740:	a1 18 9b 04 08       	mov    0x8049b18,%eax
 8048745:	89 44 24 0c          	mov    %eax,0xc(%esp)
 8048749:	c7 44 24 08 10 00 00 	movl   $0x10,0x8(%esp)
 8048750:	00 
 8048751:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 8048758:	00 
 8048759:	c7 04 24 3d 89 04 08 	movl   $0x804893d,(%esp)
 8048760:	e8 47 fc ff ff       	call   80483ac <fwrite@plt>
 8048765:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
 804876c:	eb 6f                	jmp    80487dd <main+0x191>
 804876e:	8d 45 d2             	lea    -0x2e(%ebp),%eax
 8048771:	8d 55 dd             	lea    -0x23(%ebp),%edx
 8048774:	89 44 24 04          	mov    %eax,0x4(%esp)
 8048778:	89 14 24             	mov    %edx,(%esp)
 804877b:	e8 48 fd ff ff       	call   80484c8 <check_serial>
 8048780:	85 c0                	test   %eax,%eax
 8048782:	75 2e                	jne    80487b2 <main+0x166>
 8048784:	a1 18 9b 04 08       	mov    0x8049b18,%eax
 8048789:	89 44 24 0c          	mov    %eax,0xc(%esp)
 804878d:	c7 44 24 08 16 00 00 	movl   $0x16,0x8(%esp)
 8048794:	00 
 8048795:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
 804879c:	00 
 804879d:	c7 04 24 4e 89 04 08 	movl   $0x804894e,(%esp)
 80487a4:	e8 03 fc ff ff       	call   80483ac <fwrite@plt>
 80487a9:	c7 45 c8 ff ff ff ff 	movl   $0xffffffff,-0x38(%ebp)
 80487b0:	eb 2b                	jmp    80487dd <main+0x191>
 80487b2:	a1 08 9b 04 08       	mov    0x8049b08,%eax
 80487b7:	ff d0                	call   *%eax
 80487b9:	8b 15 14 9b 04 08    	mov    0x8049b14,%edx
 80487bf:	8d 45 e8             	lea    -0x18(%ebp),%eax
 80487c2:	89 44 24 08          	mov    %eax,0x8(%esp)
 80487c6:	c7 44 24 04 65 89 04 	movl   $0x8048965,0x4(%esp)
 80487cd:	08 
 80487ce:	89 14 24             	mov    %edx,(%esp)
 80487d1:	e8 86 fb ff ff       	call   804835c <fprintf@plt>
 80487d6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
 80487dd:	8b 45 c8             	mov    -0x38(%ebp),%eax
 80487e0:	83 c4 54             	add    $0x54,%esp
 80487e3:	59                   	pop    %ecx
 80487e4:	5d                   	pop    %ebp
 80487e5:	8d 61 fc             	lea    -0x4(%ecx),%esp
 80487e8:	c3                   	ret    
 80487e9:	90                   	nop    
 80487ea:	90                   	nop    
 80487eb:	90                   	nop    
 80487ec:	90                   	nop    
 80487ed:	90                   	nop    
 80487ee:	90                   	nop    
 80487ef:	90                   	nop    

080487f0 <__libc_csu_fini>:
 80487f0:	55                   	push   %ebp
 80487f1:	89 e5                	mov    %esp,%ebp
 80487f3:	57                   	push   %edi
 80487f4:	56                   	push   %esi
 80487f5:	53                   	push   %ebx
 80487f6:	e8 98 00 00 00       	call   8048893 <__i686.get_pc_thunk.bx>
 80487fb:	81 c3 6d 12 00 00    	add    $0x126d,%ebx
 8048801:	83 ec 0c             	sub    $0xc,%esp
 8048804:	8d 83 1c ff ff ff    	lea    -0xe4(%ebx),%eax
 804880a:	8d bb 1c ff ff ff    	lea    -0xe4(%ebx),%edi
 8048810:	29 f8                	sub    %edi,%eax
 8048812:	c1 f8 02             	sar    $0x2,%eax
 8048815:	8d 70 ff             	lea    -0x1(%eax),%esi
 8048818:	83 fe ff             	cmp    $0xffffffff,%esi
 804881b:	74 0c                	je     8048829 <__libc_csu_fini+0x39>
 804881d:	8d 76 00             	lea    0x0(%esi),%esi
 8048820:	ff 14 b7             	call   *(%edi,%esi,4)
 8048823:	4e                   	dec    %esi
 8048824:	83 fe ff             	cmp    $0xffffffff,%esi
 8048827:	75 f7                	jne    8048820 <__libc_csu_fini+0x30>
 8048829:	8d b4 26 00 00 00 00 	lea    0x0(%esi),%esi
 8048830:	e8 9f 00 00 00       	call   80488d4 <_fini>
 8048835:	83 c4 0c             	add    $0xc,%esp
 8048838:	5b                   	pop    %ebx
 8048839:	5e                   	pop    %esi
 804883a:	5f                   	pop    %edi
 804883b:	5d                   	pop    %ebp
 804883c:	c3                   	ret    
 804883d:	8d 76 00             	lea    0x0(%esi),%esi

